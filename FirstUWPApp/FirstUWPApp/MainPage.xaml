<Page
    x:Class="FirstUWPApp.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:FirstUWPApp"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
    <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="wideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="720"/>
                    </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="narrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="manipulateMe.Height" Value="150"/>
                        <Setter Target="manipulateMe.Width" Value="150"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <StackPanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="12,10,12,12">
            <TextBlock Text="Description:" Style="{StaticResource HeaderTextBlockStyle}"/>
            <TextBlock Style="{StaticResource SubheaderTextBlockStyle}" TextWrapping="Wrap">
                This scenario demonstrates how to use the GestureRecognizer class to enable the same interactions on an object as the XAML Manipulations scenario. This is useful if your app uses its own framework and, thus, cannot use the manipulation events on XAML elements. In this scenario, the GestureSettings property is set to control what types of gestures the GestureRecognizer should react to and then its Process* methods are exercised to interpret user interaction.
            </TextBlock>
            <ComboBox Name="movementAxis" Header="Movement Axis" SelectionChanged="movementAxis_Changed" VerticalAlignment="Center" Margin="0,12,0,0">
                <ComboBoxItem Content="X and Y"/>
                <ComboBoxItem Content="X only"/>
                <ComboBoxItem Content="Y only"/>
            </ComboBox>
            <ToggleSwitch x:Name="InertiaSwitch" Header="Inertia" Margin="0,12,0,0" Toggled="InertiaSwitch_Toggled"/>
            <Button x:Name="resetButton" Content="Reset" Margin="0,12,0,0" Click="resetButton_Pressed"/>
            <Canvas x:Name="mainCanvas" ManipulationMode="None" Margin="0,12,0,0" MinHeight="400">
                <Border x:Name="manipulateMe" Background="LightGray" Height="200" Width="200"  ManipulationMode="All">
                    <TextBlock Text="Moving Block" Style="{ThemeResource BaseTextBlockStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
                </Border>
            </Canvas>
            <Canvas x:Name="mainCanvasToo" ManipulationMode="None" Margin="0,12,0,0" MinHeight="400">
                <Border x:Name="manipulateMeToo" Background="LightGray" Height="200" Width="200"  ManipulationMode="All">
                    <TextBlock Text="Moving Block 2" Style="{ThemeResource BaseTextBlockStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
                </Border>
            </Canvas>
        </StackPanel>
    </ScrollViewer>
</Page>
